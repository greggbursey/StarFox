20161011

Statements, Expressions, Nesting, and Functions


Statements vs Expressions
=========================

These are two important concepts in javascript. Basically, the difference is this:
- An expression is a piece of code that produces a value.
- A statement is a piece of code that can be on a line by itself. It's a
  complete "statement".

Expressions
-----------
All the following pieces of code produce a value.

    1 + 1
    "hello"
    myfunc()


Statements
----------
Each of the following pieces of code can be valid on a line by itself.
    a = 1 + 1;
    var world = "hello";
    var result = myfunc();

Also, some expressions can be valid statements (can be on a line by itself...
just put a semicolon after it):
    myfunc();


When Javascript executes some code, if it finds an expression, it basically
evaluates the expression code and puts the resulting value where the code used
to be. For example:

    a = 1 + 1;

Javascript sees that `1 + 1` is an expression, so it evaluates it and puts the
resulting value where the code used to be.

    a = 2;

Same thing happens with function call expressions. Imagine we had this function:

    function myfunc () { return "blah"; }

And we had this code:

    a = myfunc();

Javascript sees that `myfunc()` is an expression, so it evaluates it and
puts the resulting value where the code used to be.

    a = "blah";

What would happen if our function didn't return anything?

    function myfunc () {  }

In Javascript, if a function doesn't return anything, the return value is
assumed to be the special value `undefined`. So our original expression:

    a = myfunc();

Would expand to this:

    a = undefined;


Variables can also be expressions. For example, in this statement:

    a = b;

`b` is an expression. It will be evaluated and replaced with whatever its
value is. So let's say:

    b = "hello";

So when Javascript comes to this line:

    a = b;

It will evaluate `b` and replace the original code with the resulting value:

    a = "hello";


Types of Statements
-------------------
There are different types of statements. Almost every statement uses an
expression in some way. For example:

An if statement is like this:

    if (EXPRESSION) {
    }
    else if (EXPRESSION_2) {
    }
    else {
    }

A while loop is like this:

    while (EXPRESSION) {
    }

A break statement is probably the only statement that doesn't use an
expression of some type:

    break;
	continue;

An assignment statement is like this:

    VARIABLE = EXPRESSION;
    
A return statement is like this:

    return EXPRESSION;

Most statements also have side effects. For example:
- The if, while, and break statements have the side effect of controlling
  which line of code is executed next.
- An assignment statement updates a variable's memory.
- A return statement exits a function.



Nesting
=======

Nesting is a really important concept in programming.

When I say "nesting", I mean something like Russian dolls. You open up one and
there is another inside. You open that one up and there's another inside. You
open that one and... etc.


Nesting with Parentheses
------------------------

The most obvious case of nesting in programming uses parentheses.

Consider the following code:

    var a = 1 + 2 * 3;

Is the answer 9 or 7?

Due to operator precedence, Javascript will always group the multiplication
products first. So basically, it will treat `2 * 3` as an expression first,
evaluate it, and replace the code with the resulting value:

    var a = 1 + 6;

And then evaluate the resulting expression again:

    var a = 7;

But what if we wanted to multiply three times the sum of one and two?
We could use parentheses:

    var a = (1 + 2) * 3;

Parentheses are a way of telling Javascript, "the stuff inside these
parentheaes is an expression".

That way, when Javascript gets to the parentheses, it will evaluate
everything inside the parentheses as a single expression, separate from the
surrounding code.

So this:

    var a = (1 + 2) * 3;

Will expand to this:

    var a = 3 * 3;

And that is now an expression in itself which evaluates to:

    var a = 9;

Nesting is recursive, meaning you can nest something inside of a nest:

    var a = ( ( 1 + 2 ) * 3 ) + 4;

There is no limit to how deep you can go. It's one of the fundamental
characteristics of a turing-complete programming language.

    var a = ( ( ( ( ( 1 + 2 ) + 3 ) + 4 ) + 5 ) + 6 ) + 7;


Nesting with Functions
----------------------

Parentheses aren't the only way to nest code. Functions are another way.

Imagine we had this code:

    var a = 3 * (4 + 5);

That would evaluate to this:
     
    var a = 3 * 9;

And then to this:
    
    var a = 27;

Instead of using parentheses, we could also move the nested code out into a
function:

    var myfunc = function () { 
        return 4 + 5;
    };

So we could change our original statement to this:
    
    var a = 3 * myfunc();

That would get expanded to this:

    var a = 3 * 9;

Which would get expanded to this:
    
    var a = 27;

Note that myfunc() and (4 + 5) return EXACTLY THE SAME RESULT.

The only difference is that when Javascript encounters the myfunc() call, it
actually STEPS INTO that function by "adding it onto the call stack". That
way, program execution now enters the myfunc() function.

When Javascript hits a return statement, it will evaluate the EXPRESSION
contained within it and remember the resulting value. It will then EXIT the
function and give control back to the the code that called it. Then, the
return value it was remembering is put where the function call code
originally was.

So for the given code:

    var a = 3 * myfunc();

This is what Javascript would do:
    
    Call myfunc()
        We are now in the myfunc() function
        We are now at the line:
            return 4 + 5;
        Evaluate 4 + 5... the reuslt is 9
        The line now looks like:
            return 9;
        Exit the myfunc() function and return 9

    Replace the original function call code with the return value (9)

    var a = 3 * 9

    var a = 27

Remember, if a return statement doesn't exist anywhere in the function, then
it is assumed that the return value is `undefined`.

This function doesn't return a value:

    function () { console.log("hi"); }

It DOES something -- it prints to the console -- but it doesn't have a return
statement, so Javascript will assume the return value is `undefined`.

So when we do this:

    var myfunc = function () { console.log("hi"); };
    var a = myfunc();

When Javascript executes that function, since there's no return statement,
the return value is `undefined`, and so the value stored in `a` will be the
special value `undefined`.


The function call
=================

The function call is a special kind of expression. It basically means,
"whatever expression comes before the parentheses, evaluate it, and take the
result and call it as a function".

So for example, if we have:
    myfunc()

This is saying, "take the expression `myfunc`, evaluate it (evaluating a
variable just retrieves whatever is stored in that variable), take the result
and call it as a function".

If there is actually a function stored in the variable `myfunc`, this will
work as expected. Otherwise, you'll see a console error:

    TypeError: myfunc is not a function

Since the code that comes before the parentheses can be any expression, any of
these are symtactically valid:

    myfunc()
    (myfunc)()
    a.b()
    a["b"]()
    (a["b"])()
    1()
    (1 + 1)()

Note that I said they're all *syntactically* valid. Some of them will produce
that TypeError, such as 1(). The expression `1` does not resolve to a
function. But on the other hand, `a.b` could be a function. Meaning, there
could be a function stored on the `b` property of the `a` variable. And the
expression `a["b"]` is the same as thing as `a.b`.

For example:

    var myfunc = function () { return 5; };
    var a = { b: myfunc };
    var c = a.b();

Notice how the function on the first line is originally stored in `myfunc`.

The second line takes the function stored in `myfunc` and also stores it on
the `b` property in a new object. The new object is then stored in the `a`
variable.

On the third line, `a.b` is called as a function -- meaning, it evaluates
`a.b` as an expression, which, remember, just grabs the value stored in that
variable. The value stored in that variable is -- remember? A function. When
that value is then called as a function, it does what we expect and doesn't
throw a TypeError.

If we did this instead:

    var a = { b: 1 };
    var c = a.b();

When Javascript evaluates that expression `a.b`, it evaluates to the value
`1`. It then tries to call `1` as a function. Since `1` is obviously a number,
and not a function, we will see the error:

    TypeError: a.b is not a function
    

You'll notice that function calls and nesting both use parentheses. Don't
confuse them!

You'll learn how to tell them apart instinctively, and maybe you already do.
But if you ever have trouble telling them apart:

Basically, if the parentheses are immediately following an
expression, you'll know that it's a function call. Otherwise, if they follow
anything else, such as a comma, or an equals sign, or aren't preceded by
anything, they're being used for nesting.
.

For example:

    hello()         <-- function call
    hello(a)        <-- function call
    (hello)()       <-- first pair is nesting, second pair is a function call
    (a, (a + 5))    <-- both nesting
    a()()()         <-- all are function calls
    (a)()()()       <-- first is nesting, the rest are function calls
    a = (hello)     <-- nesting


The function expression
=======================

Functions are a funny thing in Javascript. In most languages, you can only
CALL a function. But in Javascript, functions are actually a special kind of
object. You can actually pass a function around like it's a normal variable,
add it to arrays, store in variables, and all kinds of other stuff. Because
of this, we say that in Javascript, functions are "First-class citizens".


Ways to create a function
-------------------------

There's two ways to define a function in Javascript. One is using a FUNCTION
DECLARATION, like this, where the name of the function immediately follows the
"function" keyword:
    
    function myfunc () {

    }

This is a unique case with special rules, so we are going to ignore this
for now.

The second, more flexible way to define a function in Javascript is using a
FUNCTION EXPRESSION. You may have seen it before:

    var myfunc = function () { console.log("hello"); };

But actually, we can break that down a little farther. That line is really an
ASSIGNMENT STATEMENT. Remember our assignment statement template from before?

    VARIABLE = EXPRESSION;

So in this case, the VARIABLE part of the statement is this:

    var myfunc

...and the EXPRESSION part of the statement is this:

    function () { console.log("hello"); }

And that, right there, is a FUNCTION EXPRESSION. In other languages this is
called an "anonymous function" or "lambda" since it doesn't actually include
the name of the function. See that? In most languages when you create a
function, you have to do something like:

    public bool MyFunc() {}

...and MyFunc is the name of the function. Similarly, in Javascript, we can
also do:

    function myfunc () {}

...and that will actually name the function. (Remember, we're ignoring that
case for now.)

But in Javascript's FUNCTION EXPRESSION, we're not actually including a name
at all:

    function () { console.log("hello"); }

The fact that we don't have to actually include a name for the function is
very useful, as we will see later.

When Javascript "evaluates" this expression, the resulting value is a
function object.

So if we see this expression somewhere:

    function () { console.log("hello"); }

Javascript evaluates that expression which results in a function object. It
DOES NOT execute the code *inside* the function. That's important. This
expression just creates the function object. That function object "remembers"
the code defined in the body of the function so it can be called LATER.

Remember that. When we create the function, THE FUNCTION IS NOT CALLED YET. In
order to actually CALL the function, we must put the function call parentheses
after it. If you don't see those parentheses, the function is not being
called!!! (The only exception is when you use the methods .apply or .call but
those are more advanced topics so don't worry about those for now.)

Remember that -- if the function call parentheses don't follow the function,
THE FUNCTION IS NOT BEING CALLED.

If we do want to call it later, we'll need to assign it to a variable:

    var myfunc = function () { console.log("hello"); };

That way, if we want to call the function, we can do this:

    myfunc();

Remember what that does? It evaluates `myfunc` as an expression, and treats
the result as a function and calls it. Remember evaluating a variable results
in the value that was stored in that variable. What value is stored in
`myfunc`? It's that anonymous function we defined above. Javascript then
calls that value as if it were a function, and since it IS a function, it works
as expected and we see "hello" in the console.

So if we had this function:

    var myfunc = function () { return 5; };

And if we say this:

    var a = myfunc();

Javascript actually expands it to this:

    var a = function () { return 5; }();

So in that case, the function creation expression evaluates to a function
object, which Javascript then calls as a function. Since a function object is
a function (surprise!), it works as expected.

When Javascript calls the function, the function returns the value 5, so
this would be expanded to:

    var a = 5;

See that? See how the function is not actually getting called until the
parentheses are hit?

We can use this ourselves. If we want to define a function and then
immediately execute it, we could just do this:

    function () { console.log("hi"); }();

Notice how we didn't even assign it to a variable. That means that after it's
executed and the console.log happens, the function object will cease to exist.

Exercises
    1: In which of the following examples is there a function being called?

        Example 1:
            a = function () { return 5; };

        Example 2:
            a = function () { return 5; };
            a();

        Example 3:
            a = function () { return 5; }();


    2: In each of the following examples, what will appear in the console?

        Example 1:
            a = function () { return 5; }
            console.log(a);

        Example 2:
            a = function () { return 5; }();
            console.log(a);

        Example 3:
            console.log(function () { return 5; });

        Example 4:
            console.log(function () { return 5; }());


Functions and if statements
---------------------------

Since the function creation is an expression, we can put that ANYWHERE an
expression is required. Take for example the `if` statement. Remember it
from above? Since an `if` statement actually takes any expression and evaluates
it as a boolean, we could technically do this:

    if (function () { return false; }) {
        console.log("seems wrong");
    }

Now remember that Javascript does not actually CALL the function yet, since we
didn't use the function call-style parentheses. At this point, it just
expands that function creation expression to a function object. And the `if`
statement converts the function object to a boolean. And a function object,
when converted to a boolean, always evaluates to true. ANY object in
Javascript evaluates to true. The only things that evaluate to false in
Javascript are: false, 0, null, undefined, NaN, and the empty string "".
EVERYTHING ELSE evaluates to true, including things you wouldn't normally
expect, like the string "false", empty arrays, emnpty objects, etc.

(Yes, Angular treats "false" or "f" as false, but that's Angular, NOT
Javascript.)

So that above `if` statement will always do the console log, because that
function expression will evaluate to true. There's really no point in putting
a function expression in an `if` statement like that because we could just as
easily do this:

    if (true) {

    }

(Of course, there's no point in doing that either... if it's always true, why
wrap it in an `if`? But you get the point.)

But `if` statements can be useful for checking the EXISTENCE of a function.

So if we do this:

    if (a) {

    }

If `a` hasn't been defined, that will evaluate to false and the body won't
be executed.

But if we do this:

    var a = function () { console.log("hi"); };

    if (a) {

    }

The `if` statement body will be executed, because `a` evaluates to a function
object, which again evaluates to true when the if statement converts it to a
boolean.

Honestly, this isn't the best way to check if something is a function. What
about this?

    var a = 1;
    if (a) {
        a();
    }

This doesn't work as expected. Yes, `a` evaluates to true, but that's because
it's the number `1`. And the number `1` is not a function.

If we want to actually check if something is defined as a function, the best
way is to use the `typeof` keyword:

    if (typeof a === 'function') {
        a();
    }

This will work exactly as expected. Even if `a` is null or undefined, `typeof`
will always return a string, so it can be safely used with ===.

This is very useful. What would happen if we didn't check first? Let's assume
that in the below example, `nonExistingFunction` has never been defined:

    var a = nonExistingFunction();

What will happen? Javascript will evaluate `nonExistingFunction` and find that
it hasn't actually been defined, and it will give us this error:

    ReferenceError: nonExistingFunction is not defined

How about if we did this (which is probably more common in our codebase):

    var myObj = {
        prop1: "hi",
        prop2: "bye"
    };

    var a = myObj.prop3();

What will happen? Javascript evaluates the expression `myObj.prop3`. But
`myObj` doesn't have a `prop3` property, so the result of that expression will
be `undefined`. Then Javascript tries to call `undefined` as a function, and
obviously it's not, so we get the same message:

    TypeError: myObj.prop3 is not a function



