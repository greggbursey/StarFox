20150612



THE PURPOSE OF ANGULAR
----------------------

The problem with HTML
---------------------
HTML can get messy, as you've noticed.

Lots of repeated markup, especially if you have lists of ninja turtles, tests, or steps.

It can get diffcult to read the HTML and see what it's doing.

Also, HTML markup is not related to the meaning or intention of your application. The only meaning it has is for display.

For example, a <div> is only intended to be a container for other HTML elements. You can do anything you want with it. It doesn't signal to the programmer what it's intended to DO. For example, just looking at the HTML, a programmer can't necessarily tell whether a div is supposed to contain a blog post, a test step, or a chat box.

And with JavaScript, you can change the HTML on the fly. But you can't just look at your HTML and see what the markup / element structure is supposed to look like when it's built -- because it doesn't exist yet! You just see a bunch of document.createElement() and document.getElementByID() calls. That makes it hard to change the layout and styling.

It's also a lot of typing to do the same stuff over and over again. It gets repetitive.


Enter Angular
-------------
Angular tries to solve this problem by mixing the *intention* of the application in with the HTML. So when you look at the HTML template, it's obvious what it's supposed to do and how it does it.

This is mostly possible because there are certain things that are very common with web pages -- such as forms, input boxes, repeating elements, click events, etc. On any given project, web developers spend lots of time wiring these things up in very similar, repetitive ways. We know what these things are and we do them all the time, so Angular made it easy for us to do them quickly with minimal effort.


What Angular Does
-----------------
When you use Angular, the HTML you write is kind of like "dirty" HTML -- it's not really valid. It's more like a special language for Angular, so it knows what to do on the page. It doesn't break the browser because when the page first loads, Angular gets in there and modifies it before the visitor sees anything.

When we write Angular HTML templates, a lot of what we write is sort of like "Angular"-Script. It's not really HTML and it's not really JavaScript -- it's sort of a weird hybrid that's unique to Angular.

Most of that, we will write inside HTML attributes. Attributes are things like id="" or class="". Angular uses its own special attributes so we can include "Angular"-Script inside our HTML.


